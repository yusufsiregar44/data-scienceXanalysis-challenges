{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# project configurations\n",
    "\n",
    "import sqlalchemy as sa\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pandas import ExcelWriter\n",
    "from pandas import ExcelFile\n",
    "import datetime\n",
    "import os\n",
    "import zipfile\n",
    "import uuid\n",
    "import matplotlib\n",
    "import seaborn as sns\n",
    "from os.path import basename\n",
    "from datetime import datetime, date, time, timedelta\n",
    "\n",
    "\n",
    "client_pg = sa.create_engine('postgresql://localhost:5432/postgres')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_trx = \"\"\"\n",
    "  select * from transactions order by created_date asc;\n",
    "\"\"\"\n",
    "df_all_trx = pd.read_sql(all_trx, client_pg)\n",
    "\n",
    "df_all_trx.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question number two part one\n",
    "\n",
    "# fraudulent users data\n",
    "\n",
    "# sum of transactions distinct fraudulent user has made\n",
    "sum_distinct_number_of_trx_made_by_fraudulent_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id in (select fraudsters.user_id\n",
    "from fraudsters) group by user_id order by count desc;\n",
    "\"\"\"\n",
    "df_sum_fraud = pd.read_sql(sum_distinct_number_of_trx_made_by_fraudulent_user, client_pg)\n",
    "df_sum_fraud.plot.hist('count', title='ALL')\n",
    "indexNames = df_sum_fraud[ df_sum_fraud['count'] > 200 ].index\n",
    "df_sum_fraud.drop(indexNames, inplace=True)\n",
    "df_sum_fraud.plot.hist('count', bins=200)\n",
    "\n",
    "# sum of declined transactions distinct fraudulent user has made\n",
    "sum_distinct_number_of_trx_made_by_fraudulent_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id in (select fraudsters.user_id\n",
    "from fraudsters) and state='DECLINED' group by user_id order by count desc;\n",
    "\"\"\"\n",
    "df_sum_fraud = pd.read_sql(sum_distinct_number_of_trx_made_by_fraudulent_user, client_pg)\n",
    "df_sum_fraud.plot.hist('count', title='DECLINED')\n",
    "\n",
    "# sum of completed transactions distinct fraudulent user has made\n",
    "sum_distinct_number_of_trx_made_by_fraudulent_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id in (select fraudsters.user_id\n",
    "from fraudsters) and state='COMPLETED' group by user_id order by count desc;\n",
    "# \"\"\"\n",
    "df_sum_fraud = pd.read_sqil(sum_distinct_number_of_trx_made_by_fraudulent_user, client_pg)\n",
    "df_sum_fraud.plot.hist('count', ttle='COMPLETED')\n",
    "\n",
    "# normal users data\n",
    "\n",
    "# sum of transactions distinct normal user has made\n",
    "sum_distinct_number_of_trx_made_by_normal_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id not in (select fraudsters.user_id\n",
    "from fraudsters)  group by user_id order by count desc;\n",
    "\"\"\"\n",
    "df_sum_normal = pd.read_sql(sum_distinct_number_of_trx_made_by_normal_user, client_pg)\n",
    "indexNames = df_sum_normal[ df_sum_normal['count'] > 500 ].index\n",
    "df_sum_normal.drop(indexNames, inplace=True)\n",
    "df_sum_normal.plot.hist('count', title='ALL')\n",
    "\n",
    "# sum of declined transactions distinct normal user has made\n",
    "sum_distinct_number_of_trx_made_by_normal_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id not in (select fraudsters.user_id\n",
    "from fraudsters) and state='DECLINED' group by user_id order by count desc;\n",
    "\"\"\"\n",
    "df_sum_normal = pd.read_sql(sum_distinct_number_of_trx_made_by_normal_user, client_pg)\n",
    "indexNames = df_sum_normal[ df_sum_normal['count'] > 500 ].index\n",
    "df_sum_normal.drop(indexNames, inplace=True)\n",
    "df_sum_normal.plot.hist('count', title='DECLINED')\n",
    "\n",
    "# sum of completed transactions distinct normal user has made\n",
    "sum_distinct_number_of_trx_made_by_normal_user = \"\"\"\n",
    "select distinct(user_id), count(index) AS count from transactions where user_id not in (select fraudsters.user_id\n",
    "from fraudsters) and state='COMPLETED' group by user_id order by count desc;\n",
    "\"\"\"\n",
    "df_sum_normal = pd.read_sql(sum_distinct_number_of_trx_made_by_normal_user, client_pg)\n",
    "df_sum_normal.plot.hist('count', title='COMPLETED')\n",
    "indexNames = df_sum_normal[ df_sum_normal['count'] > 500 ].index\n",
    "df_sum_normal.drop(indexNames, inplace=True)\n",
    "df_sum_normal.plot.hist('count', title='COMPLETED')\n",
    "\n",
    "\n",
    "## scratches\n",
    "\n",
    "# sum of distinct entry_method of trx by fraudulent users\n",
    "sum_distinct_entry_method = \"\"\"\n",
    "select distinct(entry_method) as entry_method, count(entry_method) as number_of_occurrence from transactions\n",
    "where user_id in (select fraudsters.user_id\n",
    "from fraudsters)\n",
    "group by entry_method\n",
    "order by number_of_occurrence desc;\n",
    "\"\"\"\n",
    "# df = pd.read_sql(sum_distinct_entry_method, client_pg)\n",
    "# df = df.set_index('entry_method')\n",
    "\n",
    "# sum of common types of payments of fraudulent transactions\n",
    "sum_of_payments_types = \"\"\"\n",
    "select distinct(type) as type, count(type) as number_of_occurrence from transactions\n",
    "where user_id in (select fraudsters.user_id\n",
    "from fraudsters)\n",
    "group by type\n",
    "order by number_of_occurrence desc;\n",
    "\"\"\"\n",
    "# df = pd.read_sql(sum_of_payments_types, client_pg)\n",
    "# df = df.set_index('type')\n",
    "# plot = df.plot.pie(y='number_of_occurrence', figsize=(5, 5), title=\"number of occurence of individual type\")\n",
    "\n",
    "# sum of distinct entry_method of trx by fraudulent users\n",
    "sum_distinct_entry_method = \"\"\"\n",
    "select distinct(entry_method) as entry_method, count(entry_method) as number_of_occurrence from transactions\n",
    "where user_id in (select fraudsters.user_id\n",
    "from fraudsters)\n",
    "group by entry_method\n",
    "order by number_of_occurrence desc;\n",
    "\"\"\"\n",
    "df = pd.read_sql(sum_distinct_entry_method, client_pg)\n",
    "df = df.set_index('entry_method')\n",
    "df.plot.pie(y='number_of_occurrence', figsize=(5, 5), title=\"number of occurence of individual type\")\n",
    "\n",
    "# sum of common types of payments of fraudulent transactions\n",
    "sum_of_payments_types = \"\"\"\n",
    "select distinct(type) as type, count(type) as number_of_occurrence from transactions\n",
    "where user_id in (select fraudsters.user_id\n",
    "from fraudsters)\n",
    "group by type\n",
    "order by number_of_occurrence desc;\n",
    "\"\"\"\n",
    "df = pd.read_sql(sum_of_payments_types, client_pg)\n",
    "df = df.set_index('type')\n",
    "plot = df.plot.pie(y='number_of_occurrence', figsize=(5, 5), title=\"number of occurence of individual type\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# majority distribution of fraudulent users trx\n",
    "majority_distribution_of_fraudulent_users_trx = \"\"\"\n",
    "with fr_usr as (select distinct(user_id), count(index) AS count from transactions where user_id in (select fraudsters.user_id\n",
    "from fraudsters) group by user_id order by count desc)\n",
    "select user_id from fr_usr where count < 200;\n",
    "\"\"\"\n",
    "df_mj_fr_usr = pd.read_sql(majority_distribution_of_fraudulent_users_trx, client_pg)\n",
    "fr_usr_ids = df_mj_fr_usr['user_id'].tolist()\n",
    "df_trx_by_fr_usr = df_all_trx[df_all_trx.user_id.isin(fr_usr_ids)]\n",
    "\n",
    "df_entry_method_by_fr_usr = df_trx_by_fr_usr.groupby('entry_method').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_entry_method_by_fr_usr.head()\n",
    "\n",
    "# df_type_by_fr_usr = df_trx_by_fr_usr.groupby('type').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_type_by_fr_usr.head()\n",
    "\n",
    "# df_currency_by_fr_usr = df_trx_by_fr_usr.groupby('currency').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_currency_by_fr_usr.head()\n",
    "\n",
    "# df_merchant_country_by_fr_usr = df_trx_by_fr_usr.fillna('null').groupby('merchant_country').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_merchant_country_by_fr_usr.head()\n",
    "\n",
    "# df_merchant_category_by_fr_usr = df_trx_by_fr_usr.fillna('null').groupby('merchant_category').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_merchant_category_by_fr_usr.head()\n",
    "\n",
    "# df_state_by_fr_usr = df_trx_by_fr_usr.groupby('state').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_state_by_fr_usr.head()\n",
    "\n",
    "# df_source_by_fr_usr = df_trx_by_fr_usr.groupby('source').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "# df_source_by_fr_usr.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# majority distribution of normal users trx\n",
    "majority_distribution_of_normal_users_trx = \"\"\"\n",
    "with nr_usr as (select distinct(user_id), count(index) AS count from transactions where user_id not in (select fraudsters.user_id\n",
    "from fraudsters) group by user_id order by count desc)\n",
    "select user_id from nr_usr where count < 500;\n",
    "\"\"\"\n",
    "df_mj_nr_usr = pd.read_sql(majority_distribution_of_normal_users_trx, client_pg)\n",
    "nr_usr_ids = df_mj_nr_usr['user_id'].values.tolist()\n",
    "df_trx_by_nr_usr = df_all_trx[df_all_trx.user_id.isin(nr_usr_ids)]\n",
    "\n",
    "df_entry_method_by_nr_usr = df_trx_by_nr_usr.groupby('entry_method').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_entry_method_by_nr_usr.head()\n",
    "\n",
    "df_type_by_nr_usr = df_trx_by_nr_usr.groupby('type').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_type_by_nr_usr.head()\n",
    "\n",
    "df_currency_by_nr_usr = df_trx_by_nr_usr.groupby('currency').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_currency_by_nr_usr.head()\n",
    "\n",
    "df_merchant_country_by_nr_usr = df_trx_by_nr_usr.fillna('null').groupby('merchant_country').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_merchant_country_by_nr_usr.head()\n",
    "\n",
    "df_merchant_category_by_nr_usr = df_trx_by_nr_usr.fillna('null').groupby('merchant_category').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_merchant_category_by_nr_usr.head()\n",
    "\n",
    "df_state_by_nr_usr = df_trx_by_nr_usr.groupby('state').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_state_by_nr_usr.head()\n",
    "\n",
    "df_source_by_nr_usr = df_trx_by_nr_usr.groupby('source').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_source_by_nr_usr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# source of nr and fr users barh\n",
    "df_source_nr_fr_users = df_source_by_nr_usr.merge(df_source_by_fr_usr, left_on='source', right_on='source', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_source_nr_fr_users = df_source_nr_fr_users.set_index('source')\n",
    "df_source_nr_fr_users = df_source_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_source_nr_fr_users.plot.barh(title=\"count vs source of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # entry method of nr and fr users barh\n",
    "df_entry_method_nr_fr_users = df_entry_method_by_nr_usr.merge(df_entry_method_by_fr_usr, left_on='entry_method', right_on='entry_method', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_entry_method_nr_fr_users.head()\n",
    "df_entry_method_nr_fr_users = df_entry_method_nr_fr_users.set_index('entry_method')\n",
    "df_entry_method_nr_fr_users = df_entry_method_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_entry_method_nr_fr_users.plot.barh(title=\"count vs entry_method of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # type of nr and fr users barh\n",
    "# df_type_nr_fr_users = df_type_by_nr_usr.merge(df_type_by_fr_usr, left_on='type', right_on='type', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_type_nr_fr_users.head()\n",
    "df_type_nr_fr_users = df_type_nr_fr_users.set_index('type')\n",
    "df_type_nr_fr_users = df_type_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_type_nr_fr_users.plot.barh(title=\"count vs type of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # currency of nr and fr users barh\n",
    "df_currency_nr_fr_users = df_currency_by_nr_usr.merge(df_currency_by_fr_usr, left_on='currency', right_on='currency', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_currency_nr_fr_users.head()\n",
    "df_currency_nr_fr_users = df_currency_nr_fr_users.set_index('currency')\n",
    "df_currency_nr_fr_users = df_currency_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_currency_nr_fr_users.plot.barh(title=\"count vs currency of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # merchant country of nr and fr users barh\n",
    "df_merchant_country_nr_fr_users = df_merchant_country_by_nr_usr.merge(df_merchant_country_by_fr_usr, left_on='merchant_country', right_on='merchant_country', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_merchant_country_nr_fr_users.head()\n",
    "df_merchant_country_nr_fr_users = df_merchant_country_nr_fr_users.set_index('merchant_country')\n",
    "df_merchant_country_nr_fr_users = df_merchant_country_nr_fr_users[df_merchant_country_nr_fr_users.counts_fraudulent_users > 10]\n",
    "df_merchant_country_nr_fr_users = df_merchant_country_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_merchant_country_nr_fr_users.plot.barh(title=\"count vs merchant_country of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # merchant category of nr and fr users barh\n",
    "df_merchant_category_nr_fr_users = df_merchant_category_by_nr_usr.merge(df_merchant_category_by_fr_usr, left_on='merchant_category', right_on='merchant_category', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_merchant_category_nr_fr_users = df_merchant_category_nr_fr_users.set_index('merchant_category')\n",
    "df_merchant_category_nr_fr_users = df_merchant_category_nr_fr_users[df_merchant_category_nr_fr_users.counts_fraudulent_users > 10]\n",
    "df_merchant_category_nr_fr_users = df_merchant_category_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_merchant_category_nr_fr_users.plot.barh(title=\"count vs merchant_category of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# # state of nr and fr users barh\n",
    "df_state_nr_fr_users = df_state_by_nr_usr.merge(df_state_by_fr_usr, left_on='state', right_on='state', suffixes=('_normal_users', '_fraudulent_users'))\n",
    "df_state_nr_fr_users.head()\n",
    "df_state_nr_fr_users = df_state_nr_fr_users.set_index('state')\n",
    "df_state_nr_fr_users = df_state_nr_fr_users.rename(columns={'counts_normal_users': 'normal users', 'counts_fraudulent_users': 'fraudulent users'})\n",
    "df_state_nr_fr_users.plot.barh(title=\"count vs state of normal users transactions and fraudulent users transactions\")\n",
    "\n",
    "# pie chart entry_method of fr and nr usr\n",
    "df_entry_method_by_nr_usr.set_index('entry_method').plot.pie(y=\"counts\", autopct='%1.0f%%', title=\"normal users\")\n",
    "df_entry_method_by_fr_usr.set_index('entry_method').plot.pie(y=\"counts\", autopct='%1.0f%%', title=\"fraudulent users\")\n",
    "\n",
    "# pie chart entry_method of fr and nr usr\n",
    "df_entry_method_by_nr_usr.set_index('entry_method').plot.pie(y=\"counts\", autopct='%1.0f%%', title=\"normal users\")\n",
    "df_entry_method_by_fr_usr.set_index('entry_method').plot.pie(y=\"counts\", autopct='%1.0f%%', title=\"fraudulent users\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# finding consecutive transaction of normal users\n",
    "\n",
    "df_trx_by_nr_usr_processed = df_trx_by_nr_usr;\n",
    "df_trx_by_nr_usr_processed = df_trx_by_nr_usr_processed.set_index('user_id')\n",
    "df_trx_by_nr_usr_processed = df_trx_by_nr_usr_processed.fillna('null')\n",
    "list_3 = []\n",
    "\n",
    "def iterator(user_id, current_trxs_of_user_id):\n",
    "    list_iterator = [user_id]\n",
    "    current_amount = None\n",
    "    current_occurence = 0\n",
    "    for trx in current_trxs_of_user_id: \n",
    "        if trx[0] == 'CARD_PAYMENT': \n",
    "            if current_amount == None:\n",
    "                current_amount = trx[1]\n",
    "            elif trx[1] == current_amount:\n",
    "                current_occurence += 1\n",
    "            elif trx[1] != current_amount:\n",
    "                if current_occurence != 0: \n",
    "                    list_iterator.append(current_occurence)\n",
    "                    list_3.append(list_iterator)\n",
    "                    list_iterator = [user_id]\n",
    "                current_amount = trx[1]\n",
    "                current_occurence = 0\n",
    "        else:\n",
    "            if current_occurence > 0:\n",
    "                list_iterator.append(current_occurence)\n",
    "                list_3.append(list_iterator)\n",
    "                list_iterator = [user_id]\n",
    "            current_amount = trx[1]\n",
    "            current_occurence = 0\n",
    "    if current_occurence > 0:\n",
    "        list_iterator.append(current_occurence)\n",
    "        list_3.append(list_iterator)\n",
    "        list_iterator = [user_id]\n",
    "\n",
    "\n",
    "for user_id in nr_usr_ids:\n",
    "    current_trxs_of_user_id = df_trx_by_nr_usr_processed.loc[user_id, ['type', 'amount']].values\n",
    "    if(isinstance(current_trxs_of_user_id[0], str) == False):\n",
    "        iterator(user_id, current_trxs_of_user_id)\n",
    "\n",
    "df_n_3 = pd.DataFrame(list_3, columns=['user_id', 'num_cont_trx'])\n",
    "df_n_3.head()\n",
    "df_n_3_grouped = df_n_3.groupby('num_cont_trx').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_n_3_grouped['user_type'] = 'normal_users'\n",
    "df_n_3_grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# finding consecutive transctions of fraudulents users\n",
    "\n",
    "df_trx_by_fr_usr_processed = df_trx_by_fr_usr;\n",
    "df_trx_by_fr_usr_processed = df_trx_by_fr_usr_processed.set_index('user_id')\n",
    "df_trx_by_fr_usr_processed = df_trx_by_fr_usr_processed.fillna('null')\n",
    "list_4 = []\n",
    "\n",
    "def iterator(user_id, current_trxs_of_user_id):\n",
    "    list_iterator = [user_id]\n",
    "    current_amount = None\n",
    "    current_occurence = 0\n",
    "    for trx in current_trxs_of_user_id:\n",
    "        print(trx, user_id)      \n",
    "        if trx[0] == 'CARD_PAYMENT': \n",
    "            if current_amount == None:\n",
    "                current_amount = trx[1]\n",
    "            elif trx[1] == current_amount:\n",
    "                current_occurence += 1\n",
    "            elif trx[1] != current_amount:\n",
    "                if current_occurence != 0:\n",
    "                    list_iterator.append(current_occurence)\n",
    "                    list_4.append(list_iterator)\n",
    "                    list_iterator = [user_id]\n",
    "                current_amount = trx[1]\n",
    "                current_occurence = 0\n",
    "        else:\n",
    "            if current_occurence > 0:\n",
    "                list_iterator.append(current_occurence)\n",
    "                list_4.append(list_iterator)\n",
    "                list_iterator = [user_id]\n",
    "            current_amount = trx[1]\n",
    "            current_occurence = 0\n",
    "    if current_occurence > 0:\n",
    "        list_iterator.append(current_occurence)\n",
    "        list_4.append(list_iterator)\n",
    "        list_iterator = [user_id]\n",
    "\n",
    "\n",
    "for user_id in fr_usr_ids:\n",
    "    current_trxs_of_user_id = df_trx_by_fr_usr_processed.loc[user_id, ['type', 'amount']].values\n",
    "    if(isinstance(current_trxs_of_user_id[0], str) == False):\n",
    "        iterator(user_id, current_trxs_of_user_id)\n",
    "\n",
    "df_f_4 = pd.DataFrame(list_4, columns=['user_id', 'num_cont_trx'])\n",
    "df_f_4.tail()\n",
    "df_f_4_grouped = df_f_4.groupby('num_cont_trx').size().reset_index(name='counts').sort_values('counts', ascending=False)\n",
    "df_f_4_grouped['user_type'] = 'fraudulent users'\n",
    "df_f_4_grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create categorical scatter plot\n",
    "\n",
    "df_n_with_f_consecutive_card_trx = pd.concat([df_n_3_grouped, df_f_4_grouped], ignore_index=True)\n",
    "df_n_with_f_consecutive_card_trx = df_n_with_f_consecutive_card_trx.sort_values('num_cont_trx')\n",
    "\n",
    "sns.catplot(x=\"num_cont_trx\", y=\"counts\", kind=\"swarm\", data=df_n_with_f_consecutive_card_trx, hue=\"user_type\", height=5, aspect=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find out user characteristics, noticeably more than 90% are from Great Briatin. And also more than 90% of them has a exactly the same phone_country which is GB||JE||IM||GG\n",
    "\n",
    "users_fraudsters = \"\"\"\n",
    "select * from users where id in (select fraudsters.user_id from fraudsters);\n",
    "\"\"\"\n",
    "\n",
    "df_users_fraudsters = pd.read_sql(users_fraudsters, client_pg)\n",
    "df_list_phone_country_frausters = df_users_fraudsters.groupby('phone_country').size().reset_index(name='counts')\n",
    "df_list_phone_country_frausters = df_list_phone_country_frausters.set_index('phone_country')\n",
    "df_list_phone_country_frausters.plot.pie(y=\"counts\", autopct='%1.0f%%', frame=True, radius=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# users who've made non card payment and non manu transactions\n",
    "query_users_w_trx_not_cp_misc_manu = \"\"\"\n",
    "select distinct(user_id) from transactions where type != 'CARD_PAYMENT' and (entry_method != 'manu')\n",
    "\"\"\"\n",
    "# users whose phone_country is 'GB||JE||IM||GG'\n",
    "query_usr_w_pc = \"\"\"\n",
    "select * from users where phone_country = 'GB||JE||IM||GG';\n",
    "\"\"\"\n",
    "df_usr_non_cp = pd.read_sql(query_users_w_trx_not_cp_misc_manu, client_pg)\n",
    "df_usr_w_pc = pd.read_sql(query_usr_w_pc, client_pg)\n",
    "list_usr_cp = df_usr_non_cp['user_id'].values\n",
    "list_usr_pc = df_usr_w_pc['id'].values\n",
    "df_n_3_cp_misc_manu = df_n_3[(df_n_3['num_cont_trx'] <= 15) & (df_n_3['num_cont_trx'] >= 7) & ~df_n_3.user_id.isin(list_usr_cp) & df_n_3.user_id.isin(list_usr_pc)]\n",
    "\n",
    "# possible new fraudsters\n",
    "print(df_n_3_cp_misc_manu.user_id.unique())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.6 64-bit",
   "language": "python",
   "name": "python37664bitffa1473ee06547deb7ef2d0693223843"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}